// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "stringer -output=rbac_gen.go -type=Permission"; DO NOT EDIT.

package rbac

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AuditRead-2]
	_ = x[APIKeyRead-4]
	_ = x[APIKeyWrite-8]
	_ = x[CodeIssue-16]
	_ = x[CodeBulkIssue-32]
	_ = x[CodeRead-64]
	_ = x[CodeExpire-128]
	_ = x[SettingsRead-256]
	_ = x[SettingsWrite-512]
	_ = x[StatsRead-1024]
	_ = x[MobileAppRead-2048]
	_ = x[MobileAppWrite-4096]
	_ = x[UserRead-8192]
	_ = x[UserWrite-16384]
}

const _Permission_name = "AuditReadAPIKeyReadAPIKeyWriteCodeIssueCodeBulkIssueCodeReadCodeExpireSettingsReadSettingsWriteStatsReadMobileAppReadMobileAppWriteUserReadUserWrite"

var _Permission_map = map[Permission]string{
	2:     _Permission_name[0:9],
	4:     _Permission_name[9:19],
	8:     _Permission_name[19:30],
	16:    _Permission_name[30:39],
	32:    _Permission_name[39:52],
	64:    _Permission_name[52:60],
	128:   _Permission_name[60:70],
	256:   _Permission_name[70:82],
	512:   _Permission_name[82:95],
	1024:  _Permission_name[95:104],
	2048:  _Permission_name[104:117],
	4096:  _Permission_name[117:131],
	8192:  _Permission_name[131:139],
	16384: _Permission_name[139:148],
}

func (i Permission) String() string {
	if str, ok := _Permission_map[i]; ok {
		return str
	}
	return "Permission(" + strconv.FormatInt(int64(i), 10) + ")"
}
